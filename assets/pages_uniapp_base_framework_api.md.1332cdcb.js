import{_ as e,c as a,o as t,Q as o}from"./chunks/framework.8adc4ca2.js";const b=JSON.parse('{"title":"框架Api","description":"","frontmatter":{"title":"框架Api","order":4},"headers":[],"relativePath":"pages/uniapp/base/framework_api.md","lastUpdated":1681395124000}'),n={name:"pages/uniapp/base/framework_api.md"},l=o('<h1 id="框架接口" tabindex="-1">框架接口 <a class="header-anchor" href="#框架接口" aria-label="Permalink to &quot;框架接口&quot;">​</a></h1><h2 id="页面" tabindex="-1">页面 <a class="header-anchor" href="#页面" aria-label="Permalink to &quot;页面&quot;">​</a></h2><h3 id="getapp" tabindex="-1"><a href="https://uniapp.dcloud.io/collocation/frame/window?id=getapp" target="_blank" rel="noreferrer">getApp()</a> <a class="header-anchor" href="#getapp" aria-label="Permalink to &quot;[getApp()](https://uniapp.dcloud.io/collocation/frame/window?id=getapp)&quot;">​</a></h3><p><code>getApp()</code> 函数用于<strong>获取当前应用实例</strong>，一般用于获取 globalData 。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getApp</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">globalData)</span></span></code></pre></div><ul><li>不要在定义于 <code>App()</code> 内的函数中，或调用 <code>App</code> 前调用 <code>getApp()</code> ，可以通过 <code>this.$scope</code> 获取对应的 app 实例</li><li>通过 <code>getApp()</code> 获取实例之后，<strong>不要私自调用生命周期函数</strong>。</li><li>v3 模式加速了首页<code>nvue</code>的启动速度，在首页<code>nvue</code>中使用<code>getApp()</code>不一定可以获取<code>App</code>对象 <ul><li>v3 版本：<code>const app = getApp({allowDefault: true})</code>用来获取原始的<code>App</code>对象，在首页对<code>globalData</code>等初始化</li></ul></li></ul><h3 id="getcurrentpages" tabindex="-1"><a href="https://uniapp.dcloud.io/collocation/frame/window?id=getcurrentpages" target="_blank" rel="noreferrer">getCurrentPages()</a> <a class="header-anchor" href="#getcurrentpages" aria-label="Permalink to &quot;[getCurrentPages()](https://uniapp.dcloud.io/collocation/frame/window?id=getcurrentpages)&quot;">​</a></h3><p><code>getCurrentPages()</code> 函数用于获取<strong>当前页面栈的实例</strong>，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p><table><thead><tr><th>方法</th><th>描述</th><th>平台说明</th></tr></thead><tbody><tr><td><code>page.$getAppWebview()</code></td><td>获取当前页面的 webview 对象实例</td><td>App</td></tr><tr><td><code>page.route</code></td><td>获取当前页面的路由</td><td></td></tr></tbody></table><blockquote><p><code>getCurrentPages()</code>仅用于<strong>展示</strong>页面栈，<strong>请勿修改</strong>页面栈</p></blockquote><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面</li><li><code>switchTab</code> 只能打开 <code>tabBar</code> 页面</li><li><code>reLaunch</code> 可以打开任意页面</li><li>页面底部的 <code>tabBar</code> 由页面决定，即只要是定义为 <code>tabBar</code> 的页面，底部都有 <code>tabBar</code></li><li>不能在 <code>App.vue</code> 里面进行页面跳转</li></ul><h3 id="getappwebview" tabindex="-1"><a href="https://uniapp.dcloud.io/collocation/frame/window?id=getappwebview" target="_blank" rel="noreferrer">$getAppWebview()</a> <a class="header-anchor" href="#getappwebview" aria-label="Permalink to &quot;[$getAppWebview()](https://uniapp.dcloud.io/collocation/frame/window?id=getappwebview)&quot;">​</a></h3><p><code>uni-app</code> 在 内置了一个方法 <code>$getAppWebview()</code> ：得到当前<a href="http://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewObject" target="_blank" rel="noreferrer">webview</a>的对象实例</p><blockquote><p><strong>此方法仅 App 支持</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> pages </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getCurrentPages</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> page </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pages[pages</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// #ifdef APP-PLUS</span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> currentWebview </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> page</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$getAppWebview</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(currentWebview</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//获得当前webview的id</span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(currentWebview</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isVisible</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//查询当前webview是否可见</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// #endif</span></span></code></pre></div><h2 id="页面通讯" tabindex="-1">页面通讯 <a class="header-anchor" href="#页面通讯" aria-label="Permalink to &quot;页面通讯&quot;">​</a></h2><h3 id="uni-emit-eventname-object" tabindex="-1"><a href="https://uniapp.dcloud.io/collocation/frame/communication?id=emit" target="_blank" rel="noreferrer"><code>uni.$emit</code>(eventName,OBJECT)</a> <a class="header-anchor" href="#uni-emit-eventname-object" aria-label="Permalink to &quot;[`uni.$emit`(eventName,OBJECT)](https://uniapp.dcloud.io/collocation/frame/communication?id=emit)&quot;">​</a></h3><p><strong>触发</strong>全局的自定事件。附加参数都会传给监听器回调。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>eventName</code></td><td>String</td><td>事件名</td></tr><tr><td><code>OBJECT</code></td><td>Object</td><td>触发事件携带的<strong>附加参数</strong></td></tr></tbody></table><h3 id="uni-on-eventname-callback" tabindex="-1"><a href="https://uniapp.dcloud.io/collocation/frame/communication?id=on" target="_blank" rel="noreferrer"><code>uni.$on</code>(eventName,callback)</a> <a class="header-anchor" href="#uni-on-eventname-callback" aria-label="Permalink to &quot;[`uni.$on`(eventName,callback)](https://uniapp.dcloud.io/collocation/frame/communication?id=on)&quot;">​</a></h3><p><strong>监听</strong>全局的自定义事件。事件由 <code>uni.$emit</code> 触发，回调函数会接收所有传入事件触发函数的额外参数。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>eventName</code></td><td>String</td><td>事件名</td></tr><tr><td><code>callback</code></td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><h3 id="uni-once-eventname-callback" tabindex="-1"><a href="https://uniapp.dcloud.io/collocation/frame/communication?id=once" target="_blank" rel="noreferrer"><code>uni.$once</code>(eventName,callback)</a> <a class="header-anchor" href="#uni-once-eventname-callback" aria-label="Permalink to &quot;[`uni.$once`(eventName,callback)](https://uniapp.dcloud.io/collocation/frame/communication?id=once)&quot;">​</a></h3><p><strong>监听</strong>全局的自定义事件。但<strong>只触发一次</strong>，触发后<strong>移除</strong>监听器。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>eventName</code></td><td>String</td><td>事件名</td></tr><tr><td><code>callback</code></td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><h3 id="uni-off-eventname-callback" tabindex="-1"><code>uni.$off</code>(<a href="https://uniapp.dcloud.io/collocation/frame/communication?id=off" target="_blank" rel="noreferrer">eventName, callback])</a> <a class="header-anchor" href="#uni-off-eventname-callback" aria-label="Permalink to &quot;`uni.$off`([eventName, callback\\])](https://uniapp.dcloud.io/collocation/frame/communication?id=off)&quot;">​</a></h3><p><strong>移除</strong>全局自定义事件监听器</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>eventName</code></td><td>Array ＜ String ＞</td><td>事件名</td></tr><tr><td><code>callback</code></td><td>Function</td><td>事件的回调函数</td></tr></tbody></table><p><em>Tips</em></p><ul><li><strong>无参数</strong>：移除<em>所有</em>事件监听器</li><li><strong>只提供事件</strong>：移除<em>该事件</em>所有的监听器</li><li><strong>同时提供事件与回调</strong>：只移除<em>此回调的</em>监听器，提供回调必须跟<code>$on</code>回调为同一个才能移除</li></ul><p>上述函数触发的事件都是 <strong>App 全局级别</strong>的，跨任意组件，页面，nvue，vue 等</p><ul><li><code>onLoad</code> 里边 <code>uni.$on</code> 注册监听</li><li><code>onUnload</code> 里边 <code>uni.$off</code> 移除</li><li>一次性事件，直接使用 <code>uni.$once</code> 监听</li></ul>',32),s=[l];function c(p,r,d,i,h,u){return t(),a("div",null,s)}const A=e(n,[["render",c]]);export{b as __pageData,A as default};
