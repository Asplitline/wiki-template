import{_ as t,c as s,o as n,Q as e}from"./chunks/framework.8adc4ca2.js";const a="/assets/20180526-215645.26c25f97.png",l="/assets/20180528-183307.9c9a6d69.png",o="/assets/20180528-183442.35dc26a4.png",h=JSON.parse('{"title":"浏览器 API","description":"","frontmatter":{"title":"浏览器 API","order":2},"headers":[],"relativePath":"pages/js/js/browser.md","lastUpdated":1681395124000}'),r={name:"pages/js/js/browser.md"},p=e('<h1 id="浏览器-api" tabindex="-1">浏览器 API <a class="header-anchor" href="#浏览器-api" aria-label="Permalink to &quot;浏览器 API&quot;">​</a></h1><p><strong>API</strong>（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力</p><p>浏览器 API 提供了三种类型：<strong>浏览器操控类(BOM)、页面文档操控类(DOM)、网络控制类</strong></p><blockquote><p>浏览器提供的 API 并不只有这三类，还有文档对象模型、设备 API、通信 API、数据管理 API、特权 API、已认证应用程序的私有 API</p></blockquote><h2 id="文档对象模型-dom" tabindex="-1">文档对象模型 (DOM) <a class="header-anchor" href="#文档对象模型-dom" aria-label="Permalink to &quot;文档对象模型 (DOM)&quot;">​</a></h2><p>DOM(Document Object Model)：JavaScript 操作网页的接口。</p><p>将网页转为一个<strong>JavaScript 对象</strong>，从而可以用脚本进行各种操作(增删改查)</p><p>浏览器会根据 DOM 模型，将结构化文档(比如 HTML 和 XML)解析成一系列的节点， 再由这些节点组成一个<strong>树状结构(DOM Tree)</strong>。</p><p>所有的节点和最终的树状结构，都有规范的对外接口。</p><img src="'+a+`" alt="20180526-215645" style="zoom:50%;"><h3 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h3><p>节点（node）：DOM 的最小组成单位</p><p><strong>顶层</strong>：docoment 节点，文档根节点（window.docoment）</p><p><strong>父节点关系(parentNode)</strong>：直接的那个上级节点</p><p><strong>子节点关系(childNodes)</strong>：直接的下级节点</p><p><strong>同级节点关系(sibling)</strong>：拥有同一个父节点的节点</p><h3 id="查找节点" tabindex="-1">查找节点 <a class="header-anchor" href="#查找节点" aria-label="Permalink to &quot;查找节点&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">方法</th><th>关键</th><th style="text-align:center;">详情</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>getElementsByTagName()</strong></td><td>标签</td><td style="text-align:center;">返回指定 HTML 标签元素</td></tr><tr><td style="text-align:center;"><strong>getElementsByClassName()</strong></td><td>类</td><td style="text-align:center;">返回 class 符合条件的元素</td></tr><tr><td style="text-align:center;"><strong>getElementsByName()</strong></td><td>名称</td><td style="text-align:center;">返回有 name 属性的 HTML 元素</td></tr><tr><td style="text-align:center;"><strong>getElementById()</strong></td><td>id</td><td style="text-align:center;">返回匹配指定 id 属性的元素节点，id 相同，选第一个</td></tr><tr><td style="text-align:center;"><strong>querySelector()</strong></td><td>选择器</td><td style="text-align:center;">返回匹配该选择器的元素节点； <br>多个节点满足条件，则返回<strong>第一个匹配节点</strong>。</td></tr><tr><td style="text-align:center;"><strong>querySelectorAll()</strong></td><td></td><td style="text-align:center;">与 querySelector 用法类似，返回<strong>多个节点</strong></td></tr></tbody></table><p>返回值：除了<code>querySelector</code>外，都返回类似数组的 HTMLCollection 对象</p><p>querySelector()、querySelectorAll()</p><ul><li>多个参数值，使用<code>,</code>隔开</li><li>支持复杂的 CSS 选择器</li><li>不支持伪类和伪元素选择器</li></ul><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><p>一种 触发—响应 的机制：<strong>用户的行为</strong> + <strong>浏览器感知（捕获）到用户的行为</strong> + <strong>事件处理程序</strong></p><p><strong>事件三要素</strong></p><ul><li><strong>事件源</strong>：(被)触发事件的元素</li><li><strong>事件类型</strong>：事件的触发方式(例如鼠标点击或键盘点击)</li><li><strong>事件处理程序</strong>：事件触发后要执行的代码(函数形式)</li></ul><h3 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h3><h4 id="行内方式绑定元素" tabindex="-1">行内方式绑定元素 <a class="header-anchor" href="#行内方式绑定元素" aria-label="Permalink to &quot;行内方式绑定元素&quot;">​</a></h4><p>onclick 是 html 属性，属性值为可执行代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">按钮</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">alert(1)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">按钮</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onclick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">f()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  function f()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">);</span><span style="color:#676E95;font-style:italic;">//this-&gt; window对象</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="动态绑定-节点对象属性" tabindex="-1">动态绑定 (节点对象属性) <a class="header-anchor" href="#动态绑定-节点对象属性" aria-label="Permalink to &quot;动态绑定 (节点对象属性)&quot;">​</a></h4><p>获取节点对象的属性 onclick 值，值为匿名函数</p><p><strong>缺点</strong>：同一元素同一事件<strong>只能定义一次</strong>，定义两次，后一次会覆盖前一次</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//this -&gt; 选中对象 - document.getElementById(&#39;btn&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="事件监听-节点对象方法" tabindex="-1">事件监听(节点对象方法) <a class="header-anchor" href="#事件监听-节点对象方法" aria-label="Permalink to &quot;事件监听(节点对象方法)&quot;">​</a></h4><p>每个节点对象提供了 addEventListener 方法，给选中节点添加指定类型的事件及事件处理程序</p><p><strong>特点</strong>：可针对同一元素同一事件，<strong>添加多个监听事件</strong>，按序执行</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//选中对象</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="移除事件监听" tabindex="-1">移除事件监听 <a class="header-anchor" href="#移除事件监听" aria-label="Permalink to &quot;移除事件监听&quot;">​</a></h3><p><code>removeEventListener</code>移除监听函数，必须与对应<code>addEventListener</code>方法<strong>参数完全一致</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">btn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f)</span></span>
<span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f)</span></span></code></pre></div><h3 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h3><p><strong>事件类型</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/Events</a></p><table><thead><tr><th style="text-align:center;">事件名称</th><th style="text-align:center;">何时触发</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>页面事件(资源事件)</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>load</code></td><td style="text-align:center;">资源及其相关资源已完成加载</td></tr><tr><td style="text-align:center;">unload</td><td style="text-align:center;">正在被卸载</td></tr><tr><td style="text-align:center;">error</td><td style="text-align:center;">加载失败</td></tr><tr><td style="text-align:center;">resize</td><td style="text-align:center;">调整窗口大小</td></tr><tr><td style="text-align:center;"><strong>焦点事件</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">focus</td><td style="text-align:center;">元素获得焦点</td></tr><tr><td style="text-align:center;">blur</td><td style="text-align:center;">元素失去焦点</td></tr><tr><td style="text-align:center;"><strong>鼠标事件</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">mouseenter</td><td style="text-align:center;">指针<strong>移到元素内</strong></td></tr><tr><td style="text-align:center;">mouseleave</td><td style="text-align:center;">指针移出元素范围外</td></tr><tr><td style="text-align:center;"><code>mouseover</code></td><td style="text-align:center;">指针<strong>移到元素或者它的子元素内</strong></td></tr><tr><td style="text-align:center;">mouseout</td><td style="text-align:center;">指针移出元素，或者移到它的子元素上</td></tr><tr><td style="text-align:center;">mousemove</td><td style="text-align:center;">指针在元素内<strong>移动时</strong>持续触发</td></tr><tr><td style="text-align:center;">mousedown</td><td style="text-align:center;">按下任意鼠标按钮</td></tr><tr><td style="text-align:center;">mouseup</td><td style="text-align:center;">释放任意鼠标按键</td></tr><tr><td style="text-align:center;">click</td><td style="text-align:center;">按下并释放任意鼠标按键</td></tr><tr><td style="text-align:center;">dbclick</td><td style="text-align:center;">双击鼠标按钮</td></tr><tr><td style="text-align:center;"><code>contextmenu</code></td><td style="text-align:center;">右键点击 (右键菜单显示前).</td></tr><tr><td style="text-align:center;"><code>select</code></td><td style="text-align:center;">文本被选中（input 标签、textarea 标签）</td></tr><tr><td style="text-align:center;"><code>copy</code></td><td style="text-align:center;">元素内容被拷贝时</td></tr><tr><td style="text-align:center;"><strong>键盘事件</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">keydown</td><td style="text-align:center;">按下任意按键</td></tr><tr><td style="text-align:center;">keypress</td><td style="text-align:center;">除 Shift, Fn, CapsLock 外任意键被按住. (连续触发)</td></tr><tr><td style="text-align:center;">keyup</td><td style="text-align:center;">释放任意按键</td></tr><tr><td style="text-align:center;"><strong>form 表单事件</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">reset</td><td style="text-align:center;">点击重置按钮</td></tr><tr><td style="text-align:center;">submit</td><td style="text-align:center;">点击提交按钮</td></tr><tr><td style="text-align:center;"><strong>内容变化事件</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">change</td><td style="text-align:center;">内容<strong>改变且失去焦点</strong>时触发 （存储事件）</td></tr><tr><td style="text-align:center;">input</td><td style="text-align:center;"><strong>内容改变</strong>时触发 （值变化事件）</td></tr></tbody></table><p><strong>下述事件不会冒泡</strong></p><p>abort(音视频终止加载)，resize，error，load，unload，mouseenter，mouseleave，blur，focus</p><h3 id="事件的传播" tabindex="-1">事件的传播 <a class="header-anchor" href="#事件的传播" aria-label="Permalink to &quot;事件的传播&quot;">​</a></h3><p>当点击 div1 时，触发 事件 1，但是，紧跟着，事件 2 和事件 3 也被触发了。这种现象是<strong>事件冒泡</strong></p><p><img src="`+l+'" alt="20180528-183307"></p><p>JS 中事件发生后，会在不同 DOM 节点之间传播</p><h4 id="三个阶段" tabindex="-1">三个阶段 <a class="header-anchor" href="#三个阶段" aria-label="Permalink to &quot;三个阶段&quot;">​</a></h4><p>事件传播三个阶段：捕获 =&gt; 目标 =&gt; 冒泡</p><p><strong>捕获阶段</strong>：从 window 对象传导到目标节点</p><p><strong>目标阶段</strong>：目标节点上触发</p><p><strong>冒泡阶段</strong>：从目标节点传回 window 对象</p><p><img src="'+o+`" alt="20180528-183442"></p><p>传播顺序：</p><ul><li>捕获阶段：window、document、html、body、div；</li><li>冒泡阶段：div、body、html、document、window。</li></ul><blockquote><p><strong>注意：</strong> 三种事件绑定方式监听冒泡阶段事件（默认）</p></blockquote><h3 id="改变事件触发阶段" tabindex="-1">改变事件触发阶段 <a class="header-anchor" href="#改变事件触发阶段" aria-label="Permalink to &quot;改变事件触发阶段&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">事件冒泡</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//默认会发生事件冒泡</span></span>
<span class="line"><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">捕获阶段触发</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><p><strong>事件处理函数</strong>：事件触发为用户行为，无法确定时间。事件触发，会调用事件处理函数。</p><p><strong>事件对象</strong>：事件触发，信息封装成一个对象传递给处理函数。</p><blockquote><p>W3C 浏览器：e</p><p>IE 浏览器：window.event</p></blockquote><h3 id="常用属性" tabindex="-1">常用属性 <a class="header-anchor" href="#常用属性" aria-label="Permalink to &quot;常用属性&quot;">​</a></h3><p><strong>event.bubbles</strong>:返回布尔值，表示当前事件是否会<strong>冒泡</strong><strong>event.eventPhase</strong>：返回整数值，表示事件流在<strong>传播</strong>阶段的位置</p><ul><li>0：未发生</li><li>1：捕获阶段</li><li>2：目标阶段</li><li>3：冒泡</li></ul><p><strong>event.type</strong>:返回字符串，表示<strong>事件类型</strong>，大小写敏感</p><p><strong>event.timeStamp</strong>:返回毫秒时间戳，表示<strong>事件发生的时间</strong></p><p><strong>clientX、clientY</strong> :获取鼠标事件触发的坐标</p><h3 id="事件代理-委托" tabindex="-1">==事件代理/委托== <a class="header-anchor" href="#事件代理-委托" aria-label="Permalink to &quot;==事件代理/委托==&quot;">​</a></h3><p><strong>event.target</strong>：对事件起源目标的引用，属性返回<strong>触发事件节点</strong></p><blockquote><p>可能是绑定事件的那个标签，也可以是绑定事件的标签的子标签</p></blockquote><p><strong>event.currentTarget</strong>：返回<strong>事件当前所在节点</strong>，即正在执行的监听函数所绑定的那个节点</p><p><strong>事件代理/事件委托</strong>：由于事件会在冒泡阶段向上传播到父节点，可以把子节点的监听函数定义在父 节点上，由父节点的监听函数统一处理多个子元素的事件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> ul </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  ul</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">evt</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">evt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="阻止浏览器默认行为-阻止事件传播" tabindex="-1">阻止浏览器默认行为&amp;阻止事件传播 <a class="header-anchor" href="#阻止浏览器默认行为-阻止事件传播" aria-label="Permalink to &quot;阻止浏览器默认行为&amp;阻止事件传播&quot;">​</a></h3><p><strong>event.preventDefault()</strong>：阻止浏览器对当前事件的默认行为（表单提交，跳转 etc）</p><blockquote><p>监听函数内 return false，也可以阻止默认事件</p></blockquote><p><strong>event.stopPropagation()</strong>：阻止事件冒泡，防止触发定义在别的节点上的监听函数</p><h2 id="节点操作" tabindex="-1">节点操作 <a class="header-anchor" href="#节点操作" aria-label="Permalink to &quot;节点操作&quot;">​</a></h2><h3 id="节点操作-1" tabindex="-1">节点操作 <a class="header-anchor" href="#节点操作-1" aria-label="Permalink to &quot;节点操作&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">节点操作</th><th style="text-align:center;">参数</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>document.createElement()</strong></td><td style="text-align:center;">元素标签名</td><td style="text-align:center;">创建标签</td></tr><tr><td style="text-align:center;"><strong>document.createTextNode()</strong></td><td style="text-align:center;">文本节点内容</td><td style="text-align:center;">创建文本节点</td></tr><tr><td style="text-align:center;"><strong>node.appendChild()</strong></td><td style="text-align:center;">节点对象</td><td style="text-align:center;">将其作为最后一个子节点，<strong>插入当前节点</strong></td></tr><tr><td style="text-align:center;"><strong>node.hasChildNodes()</strong></td><td style="text-align:center;">节点对象</td><td style="text-align:center;">当前节点是否有子节点</td></tr><tr><td style="text-align:center;"><strong>node.removeChild()</strong></td><td style="text-align:center;">节点对象</td><td style="text-align:center;">当前节点移除该子节点</td></tr><tr><td style="text-align:center;"><strong>node.cloneNode()</strong></td><td style="text-align:center;"><strong>true</strong>：标签本身及内容<br> <strong>false</strong>：标签本身（默认）</td><td style="text-align:center;">克隆选中的节点，<strong>不会克隆事件</strong></td></tr><tr><td style="text-align:center;"><code>node.replaceChild(new,old)</code></td><td style="text-align:center;">newChild,oldChild</td><td style="text-align:center;">点替换当前节点的一个子节点，并返回被替换掉的节点</td></tr><tr><td style="text-align:center;"><strong>获取标签内容</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><strong>node.innerHTML</strong></td><td style="text-align:center;"></td><td style="text-align:center;">该元素包含标签及内容，不属于 W3C DOM 规范</td></tr><tr><td style="text-align:center;"><strong>node.innerText</strong></td><td style="text-align:center;"></td><td style="text-align:center;">该元素包含的内容</td></tr></tbody></table><h3 id="节点属性" tabindex="-1">节点属性 <a class="header-anchor" href="#节点属性" aria-label="Permalink to &quot;节点属性&quot;">​</a></h3><h4 id="原生属性" tabindex="-1">原生属性 <a class="header-anchor" href="#原生属性" aria-label="Permalink to &quot;原生属性&quot;">​</a></h4><p>HTML 元素节点的<strong>标准属性</strong>（即在标准中定义的属性），会<strong>自动成为元素节点对象的属性</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node.id - &gt; 获取id属性</span></span>
<span class="line"><span style="color:#A6ACCD;">node.class - &gt; 获取类名</span></span></code></pre></div><h4 id="属性操作" tabindex="-1">属性操作 <a class="header-anchor" href="#属性操作" aria-label="Permalink to &quot;属性操作&quot;">​</a></h4><p><strong>node.getAttribute()</strong>：获取元素属性。不存在，返回 null</p><p><strong>node.setAttribute()</strong>：设置元素属性。属性存在，修改。不存在，添加</p><p><strong>node.hasAttribute()</strong>：是否存在元素属性</p><p><strong>node.removeAttribute()</strong>：移除元素属性</p><h3 id="层级操作" tabindex="-1">层级操作 <a class="header-anchor" href="#层级操作" aria-label="Permalink to &quot;层级操作&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">层级操作</th><th>关键</th><th style="text-align:center;"></th><th></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>node.nextElementSibling</strong></td><td>节点后，第一个同级</td><td style="text-align:center;"><strong>节点后</strong>第一个同级节点。没有，返回 null</td><td></td></tr><tr><td style="text-align:center;"><strong>node.previousElementSibling</strong></td><td>节点前，第一个同级</td><td style="text-align:center;"><strong>节点前</strong>第一个同级节点</td><td></td></tr><tr><td style="text-align:center;"><strong>node.parentElement</strong></td><td>父级</td><td style="text-align:center;">节点<strong>父级节点</strong></td><td></td></tr><tr><td style="text-align:center;"><strong>node.childNodes</strong></td><td>所有子节点</td><td style="text-align:center;">当前节点<strong>所有子节点</strong>。同上（ <strong>注意空格回车也算</strong>）</td><td></td></tr><tr><td style="text-align:center;"><strong>node.firstChild</strong></td><td>第一个子节点</td><td style="text-align:center;">返回节点<strong>第一个子节点</strong></td><td></td></tr><tr><td style="text-align:center;"><strong>node.lastChild</strong></td><td>最后一个子节点</td><td style="text-align:center;">返回节点<strong>最后一个子节点</strong></td><td></td></tr><tr><td style="text-align:center;"><strong>node.firstElementChild</strong></td><td>第一个子节点（不含空格换行）</td><td style="text-align:center;">返回节点<strong>第一个子节点</strong>不包含空格换行</td><td></td></tr></tbody></table><h3 id="css-样式操作" tabindex="-1">CSS 样式操作 <a class="header-anchor" href="#css-样式操作" aria-label="Permalink to &quot;CSS 样式操作&quot;">​</a></h3><p>每个<strong>DOM 对象都有 style 属性</strong></p><ul><li><strong>名字需要改写</strong> <code>background-color -&gt; backgroundColor</code></li><li>属性值都是字符串，<strong>设置必须包括单位</strong></li><li>获取 CSS 样式，均是行内样式，style 中样式无法修改获取，但是可以覆盖</li></ul><blockquote><p>不设值为获取，设值为赋值</p></blockquote><p><strong>getComputedStyle</strong>：window 下方法，接受一个节点对象，返回该节点<strong>对象最终样式信息</strong>（样式叠加后结果）</p><ul><li>element：元素</li><li>pseudoElt（可选）：伪元素，普通元素省略或 null</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> style </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComputedStyle</span><span style="color:#A6ACCD;">(element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [pseudoElt])</span></span></code></pre></div><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p><strong>document.documentURI</strong> ：返回文档的  URL。</p><p><strong>nodeType</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType</a></p><h2 id="浏览器对象模型-bom" tabindex="-1">浏览器对象模型（BOM） <a class="header-anchor" href="#浏览器对象模型-bom" aria-label="Permalink to &quot;浏览器对象模型（BOM）&quot;">​</a></h2><p>浏览器对象模型(Browser Object Model)，提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。</p><p>浏览器对象具体实例化对象：<code>window</code></p><h3 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-label="Permalink to &quot;window 对象&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Window</a></p><h4 id="对话框" tabindex="-1">对话框 <a class="header-anchor" href="#对话框" aria-label="Permalink to &quot;对话框&quot;">​</a></h4><p><strong>window.alert()</strong>：一个警告对话框,上面显示有指定的文本内容以及一个&quot;确定&quot;按钮。</p><p><strong>window.prompt()</strong>：一个对话框,对话框中包含一条文字信息,用来提示用户输入文字。返回值：输入内容</p><p><strong>window.confirm()</strong>：方法显示一个具有一个可选消息和两个按钮(确定和取消)的模态对话框  。返回值：true or false</p><h4 id="页面加载事件" tabindex="-1">页面加载事件 <a class="header-anchor" href="#页面加载事件" aria-label="Permalink to &quot;页面加载事件&quot;">​</a></h4><p>当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）后执行</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><blockquote><p>页面只能出现一次，写多个使用事件监听方式 addEventListener</p></blockquote><h4 id="浏览器控制台" tabindex="-1">浏览器控制台 <a class="header-anchor" href="#浏览器控制台" aria-label="Permalink to &quot;浏览器控制台&quot;">​</a></h4><p><strong>window.console</strong> : 返回 console 对象的引用，提供了对浏览器调试控制台的访问</p><p><strong>console.clear()</strong> : 清空控制台。</p><p><strong>console.error()</strong> : 打印错误信息</p><p><strong>console.table()</strong> : 表格形式打印（数组，对象）</p><p><strong>console.log()</strong> ： 打印日志</p><h4 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-label="Permalink to &quot;定时器&quot;">​</a></h4><h4 id="settimeout-cleartimeout" tabindex="-1">setTimeout()，clearTimeout() <a class="header-anchor" href="#settimeout-cleartimeout" aria-label="Permalink to &quot;setTimeout()，clearTimeout()&quot;">​</a></h4><p>到达给定的时间之后执行指定的函数，<strong>只执行一次</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个定时器，1000毫秒后执行，返回定时器的编号</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> timerId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 清除定时器，传入编号</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#A6ACCD;">(timerId)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//字符串格式的函数的调用</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeOut</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">f(test)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="setinterval-和-clearinterval" tabindex="-1">setInterval()和 clearInterval() <a class="header-anchor" href="#setinterval-和-clearinterval" aria-label="Permalink to &quot;setInterval()和 clearInterval()&quot;">​</a></h4><p>到达给定的时间后<strong>周期调用函数</strong>(单位毫秒)</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个定时器，每隔1秒调用一次</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> timerId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">date</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleTimeString</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clearInterval</span><span style="color:#A6ACCD;">(timerId)</span></span></code></pre></div><h3 id="location-对象" tabindex="-1">location 对象 <a class="header-anchor" href="#location-对象" aria-label="Permalink to &quot;location 对象&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Location</a></p><p><strong>window.location</strong>  只读属性，返回一个   <strong>Location</strong>对象，其中包含有关文档当前位置的信息</p><p><strong>URL</strong>：统一资源定位符 (Uniform Resource Locator）</p><p><code>scheme://host:port/path?query#fragment</code></p><ul><li><strong>scheme</strong>：通信协议，常用的 http,ftp,maito 等</li><li><strong>host</strong>：主机，服务器、域名系统、主机名或 IP 地址</li><li><strong>port</strong>：端口号（可选）。http 默认端口为 80</li><li><strong>path</strong>：路径。由零或多个&#39;/&#39;符号隔开的字符串，表示主机的目录或文件地址</li><li><strong>query</strong>：查询（可选）。给动态网页传递参数，可有多个参数，用<code>&amp;</code>符号隔开，参数名和值用<code>=</code>符号隔开</li><li><strong>fragment</strong>：信息片断。字符串，锚点</li></ul><p><strong>页面跳转</strong>：<code>location.href=&#39;#&#39;</code></p><p><strong>location.reload()</strong></p><ul><li><strong>true</strong>：刷新页面本身</li><li><strong>false</strong>：强制刷新，加载的静态资源文件也会刷新（默认）</li></ul><h3 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-label="Permalink to &quot;history 对象&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/History</a></p><p><strong>history.back()</strong> ：浏览器记录中 前往上一页</p><p><strong>history.forward()</strong> ：浏览器记录中前往下一页</p><p><strong>history.go()</strong> : 通过当前页面相对位置从浏览器历史记录加载页面 eg：-1：上一页，1：下一页.</p><h3 id="navigator-对象" tabindex="-1">navigator 对象 <a class="header-anchor" href="#navigator-对象" aria-label="Permalink to &quot;navigator 对象&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator</a></p><p><strong>常用属性</strong></p><p><strong>userAgent</strong> : 判断用户浏览器的类型</p><p><strong>platform</strong> : 判断系统平台类型</p><p><strong>geolocation</strong> : 位置定位对象</p><p><strong>webAPI</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Reference/API" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/Reference/API</a></p>`,151),c=[p];function i(d,y,g,D,F,A){return n(),s("div",null,c)}const u=t(r,[["render",i]]);export{h as __pageData,u as default};
