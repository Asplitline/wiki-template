import{_ as s,c as n,o as a,Q as o}from"./chunks/framework.8adc4ca2.js";const l="/assets/image-20211029232707443.42800050.png",d=JSON.parse('{"title":"流程模型","description":"","frontmatter":{"title":"流程模型","order":2},"headers":[],"relativePath":"pages/electron/base/model.md","lastUpdated":1681395124000}'),e={name:"pages/electron/base/model.md"},p=o('<h1 id="流程模型" tabindex="-1">流程模型 <a class="header-anchor" href="#流程模型" aria-label="Permalink to &quot;流程模型&quot;">​</a></h1><p><strong>为什么不是一个单一的进程</strong>：网页浏览器是个极其复杂的应用程序。</p><ul><li>单个进程来处理所有功能，打开每个标签页的开销较少。</li><li>但<strong>一个网站的崩溃或无响应会影响到整个浏览器</strong>。</li></ul><p><strong>多进程模型</strong>：单点故障或恶意代码对整个程序的影响</p><p><strong>两种类型进程</strong>：主进程和渲染器</p><p><img src="'+l+`" alt="image-20211029232707443"></p><h2 id="主进程" tabindex="-1">主进程 <a class="header-anchor" href="#主进程" aria-label="Permalink to &quot;主进程&quot;">​</a></h2><p>每个 Electron 应用都有一个单一的主进程，作为应用程序的入口点。主进程在 Node.js 环境中运行，这意味着它<strong>具有 <code>require</code> 模块和使用所有 Node.js API 的能力</strong>。</p><h3 id="窗口管理" tabindex="-1">窗口管理 <a class="header-anchor" href="#窗口管理" aria-label="Permalink to &quot;窗口管理&quot;">​</a></h3><p>通过 <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" target="_blank" rel="noreferrer"><code>BrowserWindow</code></a> 模块<strong>创建和管理应用程序</strong>窗口。</p><p><code>BrowserWindow</code> 类的每个实例创建一个应用程序窗口，且在单独的渲染器进程中加载一个网页。 您可从主进程用 window 的 <a href="https://www.electronjs.org/zh/docs/latest/api/web-contents" target="_blank" rel="noreferrer"><code>webContent</code></a> 对象与网页内容进行交互。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> BrowserWindow </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1500</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadURL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://github.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> contents </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> win</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">webContents</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(contents)</span></span></code></pre></div><ul><li><code>BrowserWindow</code> 模块是一个 <a href="https://nodejs.org/api/events.html#events_class_eventemitter" target="_blank" rel="noreferrer"><code>EventEmitter</code></a>， 可以监听事件</li><li><code>BrowserWindow</code> 实例被销毁时，与其相应的渲染进程也会被终止</li></ul><h3 id="应用程序生命周期" tabindex="-1">应用程序生命周期 <a class="header-anchor" href="#应用程序生命周期" aria-label="Permalink to &quot;应用程序生命周期&quot;">​</a></h3><p>通过 <a href="https://www.electronjs.org/zh/docs/latest/api/app" target="_blank" rel="noreferrer"><code>app</code></a> 模块来控制您应用程序的生命周期</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// quitting the app when no windows are open on non-macOS platforms</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">window-all-closed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">platform</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">darwin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">quit</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="渲染进程" tabindex="-1">渲染进程 <a class="header-anchor" href="#渲染进程" aria-label="Permalink to &quot;渲染进程&quot;">​</a></h2><p><strong>展示页面的进程</strong></p><p>为每个打开的 <code>BrowserWindow</code> ( 与每个网页嵌入 ) 生成一个<strong>单独的渲染器进程</strong></p><ul><li>HTML 文件作为渲染器进程的入口点</li><li>层叠样式表 (Cascading Style Sheets, CSS) 对 UI 添加样式.</li><li><code>&lt;script&gt;</code> 元素可添加可执行的 JavaScript 代码</li></ul><p><strong>渲染器无法直接访问 <code>require</code> 或其他 Node.js API</strong></p><p>==为了在渲染器中直接包含 NPM 模块，您必须使用与在 web 开发時相同的打包工具 (例如 <code>webpack</code> 或 <code>parcel</code>)==</p><h2 id="预加载脚本" tabindex="-1">预加载脚本 <a class="header-anchor" href="#预加载脚本" aria-label="Permalink to &quot;预加载脚本&quot;">​</a></h2><p><strong>预加载（preload）脚本</strong>：包含了那些<strong>执行于渲染器进程中</strong>，且<strong>先于网页内容开始加载的代码</strong>。</p><ul><li>执行于渲染器进程中，且<strong>先于网页内容开始加载的代码</strong></li><li>运行于渲染器的环境中，<strong>能访问 Node.js API</strong></li><li>在 <code>BrowserWindow</code> 构造方法中的 <code>webPreferences</code> 选项，将预处理脚本添加到主进程</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> BrowserWindow </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path/to/preload.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//...</span></span></code></pre></div><p>预加载脚本与其所附加的渲染器在<strong>全局共享着一个 <code>window</code> 变数</strong>，但您并<strong>不能从中直接附加任何变数到 <code>window</code></strong> 之中，因为 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/context-isolation" target="_blank" rel="noreferrer"><code>contextIsolation</code></a> 是默认的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// preload.js</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myAPI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">desktop</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// renderer.js</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myAPI) </span><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span></code></pre></div><blockquote><p><strong>语境隔离（Context Isolation）</strong>：预加载脚本与渲染器的主要运行环境是隔离开来的，以避免泄漏任何具特权的 API 到您的网页内容代码中</p></blockquote><p>通过 <a href="https://www.electronjs.org/zh/docs/latest/api/context-bridge" target="_blank" rel="noreferrer"><code>contextBridge</code></a> 模块来安全地实现交互</p><ul><li>暴露 <a href="https://www.electronjs.org/zh/docs/latest/api/ipc-renderer" target="_blank" rel="noreferrer"><code>ipcRenderer</code></a> 帮手模块于渲染器中，使用 进程间通讯 ( inter-process communication, IPC ) 来从渲染器触发主进程任务 ( 反之亦然 )。</li><li>如果您正在为远程 URL 上托管的现有 web 应用开发 Electron 封裝，则您可在渲染器的 <code>window</code> 全局变量上添加自定义的属性，好在 web 客户端用上仅适用于桌面应用的设计逻辑 。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// preload.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> contextBridge </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myAPI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">desktop</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// renderer.js</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myAPI)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; { desktop: true }</span></span></code></pre></div>`,32),t=[p];function r(c,i,y,D,A,C){return a(),n("div",null,t)}const g=s(e,[["render",r]]);export{d as __pageData,g as default};
